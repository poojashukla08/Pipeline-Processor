// DESIGN CODE 
module PipelinedCPU (
  input clk,
  input reset
);

  localparam [3:0] OPCODE_ADD  = 4'b0000;
  localparam [3:0] OPCODE_SUB  = 4'b0001;
  localparam [3:0] OPCODE_LOAD = 4'b0010;

  reg [7:0] PC;

  reg [15:0] instr_mem [0:255];
  reg [15:0] data_mem [0:255];
  reg [15:0] regfile [0:15];


  reg [15:0] IF_ID_instr;

  reg [15:0] ID_EX_instr;
  reg [15:0] ID_EX_rs1_val;
  reg [15:0] ID_EX_rs2_val;

  reg [15:0] EX_WB_result;
  reg [3:0]  EX_WB_rd;
  reg        EX_WB_regwrite;

  wire [15:0] instr_IF = instr_mem[PC];

  wire [3:0] opcode_ID = IF_ID_instr[15:12];
  wire [3:0] rd_ID     = IF_ID_instr[11:8];
  wire [3:0] rs1_ID    = IF_ID_instr[7:4];
  wire [3:0] rs2_ID    = IF_ID_instr[3:0];

  wire [15:0] rs1_val_ID = regfile[rs1_ID];
  wire [15:0] rs2_val_ID = (opcode_ID == OPCODE_LOAD) ? {{12{1'b0}}, rs2_ID} : regfile[rs2_ID];

  wire [3:0] opcode_EX = ID_EX_instr[15:12];
  wire [3:0] rd_EX     = ID_EX_instr[11:8];
  wire [15:0] alu_result;

  assign alu_result = (opcode_EX == OPCODE_ADD)  ? ID_EX_rs1_val + ID_EX_rs2_val :
                      (opcode_EX == OPCODE_SUB)  ? ID_EX_rs1_val - ID_EX_rs2_val :
                      (opcode_EX == OPCODE_LOAD) ? data_mem[ID_EX_rs1_val + ID_EX_rs2_val] :
                      16'h0000;

  wire regwrite_EX = (opcode_EX == OPCODE_ADD || opcode_EX == OPCODE_SUB || opcode_EX == OPCODE_LOAD);


  always @(posedge clk) begin
    if (EX_WB_regwrite) begin
      regfile[EX_WB_rd] <= EX_WB_result;
    end
  end


  always @(posedge clk or posedge reset) begin
    if (reset) begin
      PC <= 0;
      IF_ID_instr <= 0;
      ID_EX_instr <= 0;
      ID_EX_rs1_val <= 0;
      ID_EX_rs2_val <= 0;
      EX_WB_result <= 0;
      EX_WB_rd <= 0;
      EX_WB_regwrite <= 0;
    end else begin

      PC <= PC + 1;

      IF_ID_instr <= instr_IF;

      ID_EX_instr <= IF_ID_instr;
      ID_EX_rs1_val <= rs1_val_ID;
      ID_EX_rs2_val <= rs2_val_ID;


      EX_WB_result <= alu_result;
      EX_WB_rd <= rd_EX;
      EX_WB_regwrite <= regwrite_EX;
    end
  end

endmodule

//TESTBENCH CODE
module tb;

  reg clk;
  reg reset;


  PipelinedCPU cpu (.clk(clk),.reset(reset));

  always #5 clk = ~clk;

  initial begin
    $display("Starting Testbench Simulation...");
    $dumpfile("cpu_wave.vcd");
    $dumpvars(0, tb);

    clk = 0;
    reset = 1;
    #10;
    reset = 0;
    cpu.regfile[1] = 16'd15;
    cpu.regfile[2] = 16'd10;
    cpu.regfile[3] = 16'd5;
    cpu.regfile[6] = 8'd4;       


    cpu.data_mem[8] = 16'd100; 

    cpu.instr_mem[0] = 16'b0000_0001_0010_0011;


    cpu.instr_mem[1] = 16'b0001_0100_0001_0010;


    cpu.instr_mem[2] = 16'b0010_0101_0110_0100;


    cpu.instr_mem[3] = 16'h0000;

    #100;

    $display("R1 (R2+R3): %d", cpu.regfile[1]);  
    $display("R4 (R1-R2): %d", cpu.regfile[4]);  
    $display("R5 (LOAD):  %d", cpu.regfile[5]);  

    $display("Test complete.");
    $finish;
  end

endmodule
